{"version":3,"sources":["ng://@rng/widgets/lib/material.module.ts","ng://@rng/widgets/lib/image/image.component.ts","ng://@rng/widgets/model/common-types.ts","ng://@rng/widgets/lib/preview/preview.component.ts","ng://@rng/widgets/lib/iconed-menu/iconed-menu.component.ts","ng://@rng/widgets/lib/iconed-name/iconed-name.component.ts","ng://@rng/widgets/lib/compact-toolbar/compact-toolbar.component.ts","ng://@rng/widgets/lib/named-menu/named-menu.component.ts","ng://@rng/widgets/lib/rng-widgets.module.ts"],"names":["MaterialModule","NgModule","args","exports","MatButtonModule","MatMenuModule","MatDividerModule","MatToolbarModule","MatFormFieldModule","MatInputModule","ImageComponent","this","size","imgWidth","imgHeight","imgClass","localImageURL","localAltText","Object","defineProperty","prototype","localData","data","initImage","ngOnInit","ngOnChanges","_this","imageUrl","length","image","Image","addEventListener","e","handleImageLoad","src","name","placeholder","generateInitial","event","target","width","height","userName","colors","initial","getInitial","initialColor","hashCode","match","join","stringValue","hash","i","charCodeAt","Component","selector","template","Input","XLSX","DOCX","HTML","XML","ZIP","PDF","IMAGE","VIDEO","SMALL","WIDGET","ROUND","PORTRAIT","LANDSCAPE","PreviewComponent","PreviewSize","containerClass","PreviewType","type","docType","previewURL","previewSize","round","initPreview","localPreviewURL","containerImageStyle","iconClass","push","background-image","docTypeIconClass","img","path","console","log","DocType","IconedMenuComponent","changeItem","EventEmitter","showName","itemAvatar","currentItem","item","avatar","placeholderItem","itemName","clickFunction","emit","Output","IconedNameComponent","CompactToolbarComponent","withSearch","searchChange","searchToggle","searchText","search","FormControl","subscription","Subscription","changeSearch","text","toggleSearch","toggle","setTimeout","searchfield","nativeElement","focus","setValue","ngAfterViewInit","add","valueChanges","subscribe","val","ngOnDestroy","unsubscribe","ViewChild","static","NamedMenuComponent","itemClick","onItemClick","showKey","RngWidgetsModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule"],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\n@NgModule({\n  exports: [\n    MatButtonModule,\n    MatMenuModule,\n    MatDividerModule,\n    MatToolbarModule,\n    MatFormFieldModule,\n    MatInputModule,\n  ]\n})\nexport class MaterialModule { }\n","import { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { IAvatarData } from '../../model/common-types';\n\n@Component({\n  selector: 'rng-image',\n  templateUrl: './image.component.html',\n  styleUrls: []\n})\nexport class ImageComponent implements OnInit, OnChanges {\n  localData: IAvatarData | null;\n  @Input() size = 32;\n  @Input()\n    set data(data: IAvatarData) {\n      // reset previous data\n      this.localImageURL = null;\n      this.localAltText = '';\n      // init with new data\n      this.localData = data;\n      this.initImage();\n    }\n    get data(): IAvatarData {\n      return this.localData;\n    }\n\n  @Input() imageUrl: string;\n  @Input() placeholder: string;\n\n  initialColor: string;\n  initial: string;\n\n  imgWidth = 0;\n  imgHeight = 0;\n  imgClass = 'square';\n\n  localImageURL = null;\n  localAltText = '';\n\n  constructor() {}\n\n  ngOnInit() {\n    this.initImage();\n  }\n\n  ngOnChanges(): void {\n    this.initImage();\n  }\n\n  initImage() {\n    if (this.data && this.data.imageUrl && this.data.imageUrl.length > 0) {\n      this.localImageURL = this.data.imageUrl;\n    } else if (this.imageUrl && this.imageUrl.length > 0) {\n      this.localImageURL = this.imageUrl;\n    }\n\n    if (this.localImageURL) {\n      const image = new Image();\n      image.addEventListener('load', e => this.handleImageLoad(e));\n      image.src = this.localImageURL;\n    }\n\n    if (this.data && this.data.name && this.data.name.length > 0) {\n      this.localAltText = this.data.name;\n    }\n    if (this.placeholder && this.placeholder.length > 0) {\n      this.localAltText = this.placeholder;\n    }\n\n    this.generateInitial(this.localAltText);\n  }\n\n  handleImageLoad(event) {\n    this.imgWidth = event.target.width;\n    this.imgHeight = event.target.height;\n    if (this.imgWidth > this.imgHeight) {\n      this.imgClass = 'landscape-img';\n    }\n    if (this.imgWidth < this.imgHeight) {\n      this.imgClass = 'portrait-img';\n    }\n  }\n\n  generateInitial(userName) {\n    if (userName) {\n      const colors = [\n        'orange',\n        'dark-orange',\n        'red',\n        'pink',\n        'green',\n        'light-green',\n        'blue',\n        'darken-blue',\n        'dark-blue',\n        'purple',\n        'brown',\n        'dark',\n        'gray',\n      ];\n      this.initial = this.getInitial(userName);\n      this.initialColor = colors[this.hashCode(this.initial) % colors.length];\n    }\n  }\n\n  getInitial(name) {\n    const matches = name.match(/\\b(\\w)/g);\n    return matches.join('');\n  }\n  hashCode(stringValue: string) {\n    let hash = 0;\n    if (stringValue.length === 0) {\n      return hash;\n    }\n    for (let i = 0; i < stringValue.length; i++) {\n      const chr   = stringValue.charCodeAt(i);\n      // tslint:disable-next-line: no-bitwise\n      hash  = ((hash << 5) - hash) + chr;\n      // tslint:disable-next-line: no-bitwise\n      hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n  }\n\n}\n","export interface TypeLabel {\n  color: string;\n  value: string;\n  status?: boolean;\n}\n\nexport interface IAvatarData {\n  name: string;\n  imageUrl: string;\n}\n\nexport interface IAvatarEnabled {\n  avatar: IAvatarData;\n}\n\nexport interface IPreviewData {\n  docType: DocType;\n  previewURL?: string | null;\n  previewSize?: PreviewSize | null;\n  round?: boolean | false;\n}\n\nexport enum DocType {\n  XLSX, DOCX, HTML, XML, ZIP, PDF, IMAGE, VIDEO\n}\n\nexport enum PreviewType {\n  SMALL = 'small',\n  WIDGET = 'widget',\n  ROUND = 'round',\n  PORTRAIT = 'portrait',\n  LANDSCAPE = 'landscape',\n}\n\nexport enum PreviewSize {\n  SMALL = 32,\n  WIDGET = 120,\n}\n\nexport interface IActionButton<T> {\n  iconCSS: string;\n  action: T;\n}\n","import { Component, Input } from '@angular/core';\nimport { DocType, IPreviewData, PreviewType, PreviewSize } from '../../model/common-types';\n\n@Component({\n  selector: 'rng-preview',\n  templateUrl: './preview.component.html',\n  styleUrls: []\n})\nexport class PreviewComponent {\n\n  type: DocType | -1;\n  previewURL: string | null;\n  size: PreviewSize | null = PreviewSize.SMALL;\n  localPreviewURL: string | null;\n  containerClass: PreviewType[] | null = [PreviewType.SMALL];\n  containerImageStyle: object | null;\n  iconClass: string[] | null;\n  round: boolean | false;\n\n  @Input()\n    set previewData(data: IPreviewData) {\n      this.type = data.docType;\n      this.previewURL = data.previewURL;\n      this.size = data.previewSize || PreviewSize.SMALL;\n      this.round = data.round || false;\n      this.initPreview();\n    }\n\n  initPreview() {\n    this.localPreviewURL = null;\n    this.containerClass = [PreviewType.SMALL];\n    this.containerImageStyle = null;\n    this.iconClass = null;\n\n    if (this.size === PreviewSize.WIDGET) {\n      this.containerClass = [PreviewType.WIDGET];\n    }\n\n    if (this.previewURL && this.previewURL.length) {\n      this.localPreviewURL = this.previewURL;\n    }\n\n    if (this.round) {\n      this.containerClass.push(PreviewType.ROUND);\n    }\n\n    if (this.localPreviewURL) {\n      this.containerImageStyle = {'background-image': 'url(' + this.localPreviewURL + ')'};\n      const image = new Image();\n      image.addEventListener('load', e => this.handleImageLoad(e));\n      image.src = this.localPreviewURL;\n    } else {\n      this.iconClass = this.docTypeIconClass(this.type);\n    }\n  }\n  handleImageLoad(event) {\n    const img = event.path[0];\n    console.log('handleImageLoad', img);\n    if (img.width > img.height) {\n      this.containerClass.push(PreviewType.LANDSCAPE);\n    }\n    if (img.width < img.height) {\n      this.containerClass.push(PreviewType.PORTRAIT);\n    }\n  }\n  docTypeIconClass(docType): string[] {\n    switch (docType) {\n      case DocType.DOCX:\n        return ['rng-icon-word_24px_outlined', 'ms-blue'];\n      case DocType.XLSX:\n        return ['rng-icon-excel_24px', 'ms-green'];\n      case DocType.PDF:\n        return ['rng-icon-pdf_24px', 'adobe-red'];\n      case DocType.IMAGE:\n        return ['rng-icon-image', 'gray'];\n      case DocType.VIDEO:\n        return ['rng-icon-video', 'gray'];\n      default:\n        return ['rng-icon-generic_doc', 'gray'];\n    }\n  }\n\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { IAvatarData, IAvatarEnabled } from '../../model/common-types';\n\n@Component({\n  selector: 'rng-iconed-menu',\n  templateUrl: './iconed-menu.component.html',\n  styleUrls: []\n})\nexport class IconedMenuComponent {\n\n  @Output() changeItem = new EventEmitter();\n\n  @Input() items: IAvatarData[] | IAvatarEnabled[];\n  @Input() placeholderItem: IAvatarData;\n  @Input() showName: boolean | null = true;\n  @Input() currentItem: IAvatarData | IAvatarEnabled;\n\n  get currentName(): string {\n    const avatar = this.itemAvatar(this.currentItem);\n    return avatar.name;\n  }\n\n  itemAvatar(item: IAvatarData | IAvatarEnabled): IAvatarData {\n    if (!item) {\n      return this.placeholderItem || {} as IAvatarData;\n    }\n    if ('avatar' in item) {\n      return (item as IAvatarEnabled).avatar;\n    }\n    return item as IAvatarData;\n  }\n\n  itemName(item: IAvatarData | IAvatarEnabled): string {\n    return this.itemAvatar(item).name;\n  }\n\n  clickFunction(item) {\n    this.currentItem = item;\n    this.changeItem.emit(item);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { IAvatarData, IAvatarEnabled } from '../../model/common-types';\n\n@Component({\n  selector: 'rng-iconed-name',\n  templateUrl: './iconed-name.component.html',\n  styleUrls: []\n})\nexport class IconedNameComponent {\n\n  @Input() data: IAvatarData | IAvatarEnabled;\n\n  get avatarName(): string {\n    const avatar = this.avatar;\n    return avatar.name;\n  }\n\n  get avatar(): IAvatarData {\n    if (!this.data) {\n      return {} as IAvatarData;\n    }\n    if ('avatar' in this.data) {\n      return (this.data as IAvatarEnabled).avatar;\n    }\n    return this.data as IAvatarData;\n  }\n}\n","import { Component, Input, Output, EventEmitter, AfterViewInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'rng-compact-toolbar',\n  templateUrl: './compact-toolbar.component.html',\n  styleUrls: []\n})\nexport class CompactToolbarComponent implements AfterViewInit, OnDestroy {\n\n  @Input() title: string;\n  @Input() withSearch: boolean | null = false;\n\n  @Output() searchChange = new EventEmitter();\n\n  @ViewChild('searchfield', { static: false }) searchfield: ElementRef;\n\n  searchToggle = false;\n  searchText = '';\n\n  search = new FormControl();\n  subscription = new Subscription();\n\n  changeSearch = (text: string) => this.searchChange.emit(text);\n\n  toggleSearch(toggle: boolean) {\n    this.searchToggle = toggle;\n    if (toggle) {\n      setTimeout(() => this.searchfield.nativeElement.focus(), 0);\n    } else {\n      this.search.setValue('');\n    }\n  }\n\n  ngAfterViewInit() {\n    this.subscription.add(\n      this.search.valueChanges.subscribe(val => this.changeSearch(val))\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'rng-named-menu',\n  templateUrl: './named-menu.component.html',\n  styleUrls: []\n})\nexport class NamedMenuComponent {\n  @Input() items: string[];\n  @Input() currentItem: string;\n  @Input() showKey: string;\n  @Output() itemClick = new EventEmitter();\n\n  onItemClick = (item: string) => {\n    this.currentItem = this.showKey ? item[this.showKey] : item;\n    this.itemClick.emit(item);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from './material.module';\nimport { ImageComponent } from './image/image.component';\nimport { PreviewComponent } from './preview/preview.component';\nimport { IconedMenuComponent } from './iconed-menu/iconed-menu.component';\nimport { IconedNameComponent } from './iconed-name/iconed-name.component';\nimport { CompactToolbarComponent } from './compact-toolbar/compact-toolbar.component';\nimport { NamedMenuComponent } from './named-menu/named-menu.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    ImageComponent,\n    PreviewComponent,\n    IconedMenuComponent,\n    IconedNameComponent,\n    CompactToolbarComponent,\n    NamedMenuComponent,\n  ],\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  exports: [\n    ImageComponent,\n    PreviewComponent,\n    IconedMenuComponent,\n    IconedNameComponent,\n    CompactToolbarComponent,\n    NamedMenuComponent,\n  ]\n})\nexport class RngWidgetsModule { }\n"]}