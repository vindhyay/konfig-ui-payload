!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/core"),require("@angular/common"),require("@angular/material/button"),require("@angular/material/menu"),require("@angular/material/divider"),require("@angular/router")):"function"==typeof define&&define.amd?define("@rng/buttons",["exports","@angular/core","@angular/common","@angular/material/button","@angular/material/menu","@angular/material/divider","@angular/router"],n):n(((t=t||self).rng=t.rng||{},t.rng.buttons={}),t.ng.core,t.ng.common,t.ng.material.button,t.ng.material.menu,t.ng.material.divider,t.ng.router)}(this,function(t,n,e,o,i,r,a){"use strict";var u=function(){function t(){}return t.decorators=[{type:n.NgModule,args:[{exports:[o.MatButtonModule,i.MatMenuModule,r.MatDividerModule]}]}],t}(),c=function(){function t(t,n){this.router=t,this.activeRoute=n,this.light=!1,this.historyMode=!1,this.backByUrl=null}return Object.defineProperty(t.prototype,"backRelative",{get:function(){switch(this.backSteps){case 1:return this.activeRoute;case 2:return this.activeRoute.parent;case 3:return this.activeRoute.parent.parent;default:return this.activeRoute.root.firstChild}},enumerable:!0,configurable:!0}),t.prototype.goBack=function(){this.historyMode?history.go(-this.backSteps):this.backByUrl?this.router.navigateByUrl(this.backByUrl):this.router.navigate(["../"],{relativeTo:this.backRelative})},t.decorators=[{type:n.Component,args:[{selector:"rng-back-button",template:'<button mat-icon-button\n  [ngClass]="{\'mat-white\': light}"\n  (click)="goBack()"><i class="rng-icon rng-icon-arrow_back"></i></button>'}]}],t.ctorParameters=function(){return[{type:a.Router},{type:a.ActivatedRoute}]},t.propDecorators={light:[{type:n.Input}],backSteps:[{type:n.Input}],historyMode:[{type:n.Input}],backByUrl:[{type:n.Input}]},t}(),s=function(){function t(){this.buttonClick=new n.EventEmitter}return t.decorators=[{type:n.Component,args:[{selector:"rng-icon-label-button",template:'<button mat-icon-button \n  [disabled]="disabled"\n  (click)="buttonClick.emit($event)">\n  <i [class]="iconClass"></i>\n</button>\n<span>{{label}}</span>\n'}]}],t.propDecorators={iconClass:[{type:n.Input}],label:[{type:n.Input}],disabled:[{type:n.Input}],buttonClick:[{type:n.Output}]},t}(),l=function(){function t(){this.items=["Option 1","Option 2"],this.light=!1,this.itemClick=new n.EventEmitter}return t.decorators=[{type:n.Component,args:[{selector:"rng-menu-button",template:'<div class="rng-menu-button">\n  <button mat-icon-button\n    [matMenuTriggerFor]="menu"\n    color="{{light?\'white\':\'\'}}"\n    (click)="$event.stopPropagation()">\n    <i class="rng-icon rng-icon-more_vert"></i>\n  </button>\n  <mat-menu #menu="matMenu"\n    class="rng-menu-button-list"\n    yPosition="below"\n    xPosition="before">\n    <div *ngFor="let item of items">\n      <button *ngIf="item!=\'divider\'"\n        mat-menu-item\n        (click)="itemClick.emit(item)">\n        <span>{{ item }}</span>\n      </button>\n      <mat-divider *ngIf="item===\'divider\'"></mat-divider>\n    </div>\n  </mat-menu>\n</div>\n'}]}],t.propDecorators={items:[{type:n.Input}],light:[{type:n.Input}],itemClick:[{type:n.Output}]},t}(),m=function(){function t(){var t=this;this.primaryClick=new n.EventEmitter,this.itemClick=new n.EventEmitter,this.color="accent",this.onPrimaryClick=function(){return t.primaryClick.emit()},this.onItemClick=function(n){return t.itemClick.emit(n)}}return t.prototype.toggleChange=function(t){var n=t.source;if(n){var e=n.buttonToggleGroup;t.value.some(function(t){return t===n.value})&&(e.value=[n.value])}},t.decorators=[{type:n.Component,args:[{selector:"rng-options-button",template:'<button mat-raised-button\n  class="wrapper-button"\n  [ngClass]="{\'selected\':t.menuOpen}"\n  [color]="color"\n  [disableRipple]="true"\n  [matMenuTriggerFor]="menu"\n  #t="matMenuTrigger">\n  <div class="wrapper-content">\n    <button mat-flat-button \n      tabindex="-1"\n      [color]="color"\n      class="primary-button"\n      (click)="onPrimaryClick();$event.stopPropagation()">\n      <span>{{primaryTitle}}</span>  \n    </button>\n    <i class="rng-icon rng-icon-arrow_drop_down" *ngIf="!t.menuOpen"></i>\n    <i class="rng-icon rng-icon-arrow_drop_up" *ngIf="t.menuOpen"></i>\n  </div>\n</button>\n<mat-menu #menu="matMenu"\n  class="rng-iconed-menu-list">\n  <button mat-menu-item\n    class="button-menu-item"\n    *ngFor="let item of items"\n    (click)="onItemClick(item)">\n    <div class="button-menu-item-wrapper">\n      <i [ngClass]="item.iconCSS"></i>\n      <span>{{ item.name }}</span>\n    </div>\n  </button>\n</mat-menu>'}]}],t.propDecorators={primaryClick:[{type:n.Output}],itemClick:[{type:n.Output}],primaryTitle:[{type:n.Input}],items:[{type:n.Input}],color:[{type:n.Input}]},t}(),p=function(){function t(){}return t.decorators=[{type:n.NgModule,args:[{declarations:[c,s,l,m],imports:[e.CommonModule,u],exports:[c,s,l,m]}]}],t}();t.BackButtonComponent=c,t.IconLabelButtonComponent=s,t.MenuButtonComponent=l,t.OptionsButtonComponent=m,t.RngButtonsModule=p,t.Éµa=u,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=rng-buttons.umd.min.js.map