{"version":3,"sources":["ng://@rng/buttons/lib/material.module.ts","ng://@rng/buttons/lib/back-button/back-button.component.ts","ng://@rng/buttons/lib/icon-label-button/icon-label-button.component.ts","ng://@rng/buttons/lib/menu-button/menu-button.component.ts","ng://@rng/buttons/lib/options-button/options-button.component.ts","ng://@rng/buttons/lib/rng-buttons.module.ts"],"names":["MaterialModule","NgModule","args","exports","MatButtonModule","MatMenuModule","MatDividerModule","BackButtonComponent","router","activeRoute","this","light","historyMode","backByUrl","Object","defineProperty","prototype","backSteps","parent","root","firstChild","goBack","history","go","navigateByUrl","navigate","relativeTo","backRelative","Component","selector","template","Router","ActivatedRoute","Input","IconLabelButtonComponent","buttonClick","EventEmitter","Output","MenuButtonComponent","items","itemClick","OptionsButtonComponent","_this","primaryClick","color","onPrimaryClick","emit","onItemClick","item","toggleChange","event","toggle","source","group","buttonToggleGroup","value","some","RngButtonsModule","declarations","imports","CommonModule"],"mappings":"mpBAAA,IAAAA,EAAA,WAKA,SAAAA,KAO8B,2BAP7BC,EAAAA,SAAQC,KAAA,CAAC,CACRC,QAAS,CACPC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,sBAG0BN,EAZ9B,GCAAO,EAAA,WAcE,SAAAA,EACUC,EACAC,GADAC,KAAAF,OAAAA,EACAE,KAAAD,YAAAA,EAPDC,KAAAC,OAAwB,EAExBD,KAAAE,aAA8B,EAC9BF,KAAAG,UAA4B,KA0BvC,OAnBEC,OAAAC,eAAIR,EAAAS,UAAA,eAAY,KAAhB,WACE,OAAQN,KAAKO,WACX,KAAK,EAAG,OAAOP,KAAKD,YACpB,KAAK,EAAG,OAAOC,KAAKD,YAAYS,OAChC,KAAK,EAAG,OAAOR,KAAKD,YAAYS,OAAOA,OAEvC,QAAS,OAAOR,KAAKD,YAAYU,KAAKC,6CAI1Cb,EAAAS,UAAAK,OAAA,WACMX,KAAKE,YACPU,QAAQC,IAAIb,KAAKO,WACRP,KAAKG,UACdH,KAAKF,OAAOgB,cAAcd,KAAKG,WAE/BH,KAAKF,OAAOiB,SAAS,CAAC,OAAQ,CAAEC,WAAYhB,KAAKiB,oCAhCtDC,EAAAA,UAAS1B,KAAA,CAAC,CACT2B,SAAU,kBACVC,SAAA,yLAJOC,EAAAA,cAAQC,EAAAA,iDAQdC,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,SA0BH1B,EAtCA,GCAA2B,EAAA,WAEA,SAAAA,IAWYxB,KAAAyB,YAAc,IAAIC,EAAAA,aAC9B,2BAZCR,EAAAA,UAAS1B,KAAA,CAAC,CACT2B,SAAU,wBACVC,SAAA,sMAKCG,EAAAA,qBACAA,EAAAA,wBACAA,EAAAA,2BAEAI,EAAAA,UACHH,EAdA,GCAAI,EAAA,WAEA,SAAAA,IAMW5B,KAAA6B,MAAyB,CAAC,WAAY,YACtC7B,KAAAC,OAAwB,EAEvBD,KAAA8B,UAAkC,IAAIJ,EAAAA,aAClD,2BAVCR,EAAAA,UAAS1B,KAAA,CAAC,CACT2B,SAAU,kBACVC,SAAA,8pBAICG,EAAAA,qBACAA,EAAAA,yBAEAI,EAAAA,UACHC,EAZA,GCAAG,EAAA,WAGA,SAAAA,IAAA,IAAAC,EAAAhC,KAOYA,KAAAiC,aAAe,IAAIP,EAAAA,aACnB1B,KAAA8B,UAAY,IAAIJ,EAAAA,aAIjB1B,KAAAkC,MAAuB,SAEhClC,KAAAmC,eAAc,WAAS,OAAAH,EAAKC,aAAaG,QACzCpC,KAAAqC,YAAW,SAAIC,GAA0B,OAAAN,EAAKF,UAAUM,KAAKE,IAW/D,OATEP,EAAAzB,UAAAiC,aAAA,SAAaC,OACLC,EAASD,EAAME,OACrB,GAAID,EAAQ,KACJE,EAAQF,EAAOG,kBACjBJ,EAAMK,MAAMC,KAAI,SAACR,GAAQ,OAAAA,IAASG,EAAOI,UAC3CF,EAAME,MAAQ,CAACJ,EAAOI,8BAtB7B3B,EAAAA,UAAS1B,KAAA,CAAC,CACT2B,SAAU,qBACVC,SAAA,k+BAKCO,EAAAA,0BACAA,EAAAA,6BAEAJ,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,SAcHQ,EA7BA,GCAAgB,EAAA,WAQA,SAAAA,KAkBgC,2BAlB/BxD,EAAAA,SAAQC,KAAA,CAAC,CACRwD,aAAc,CACZnD,EACA2B,EACAI,EACAG,GAEFkB,QAAS,CACPC,EAAAA,aACA5D,GAEFG,QAAS,CACPI,EACA2B,EACAI,EACAG,OAG4BgB,EA1BhC","sourcesContent":["import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDividerModule } from '@angular/material/divider';\n\n@NgModule({\n  exports: [\n    MatButtonModule,\n    MatMenuModule,\n    MatDividerModule,\n  ]\n})\nexport class MaterialModule { }\n","import { Component, Input } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'rng-back-button',\n  templateUrl: './back-button.component.html',\n  styleUrls: []\n})\nexport class BackButtonComponent {\n  @Input() light: boolean | null = false;\n  @Input() backSteps: number | null;\n  @Input() historyMode: boolean | null = false;\n  @Input() backByUrl: string | null  = null;\n\n  constructor(\n    private router: Router,\n    private activeRoute: ActivatedRoute,\n  ) {}\n\n  get backRelative() {\n    switch (this.backSteps) {\n      case 1: return this.activeRoute;\n      case 2: return this.activeRoute.parent;\n      case 3: return this.activeRoute.parent.parent;\n      // we could implement some recursion here but also it could require to navigate to \"root\" (0 for example)\n      default: return this.activeRoute.root.firstChild; // root's firstchild -1 should give us the root itself\n    }\n\n  }\n  goBack(): void {\n    if (this.historyMode) {\n      history.go(-this.backSteps);\n    } else if (this.backByUrl) {\n      this.router.navigateByUrl(this.backByUrl);\n    } else {\n      this.router.navigate(['../'], { relativeTo: this.backRelative });\n    }\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'rng-icon-label-button',\n  templateUrl: './icon-label-button.component.html',\n  styleUrls: []\n})\nexport class IconLabelButtonComponent {\n\n  @Input() iconClass: string; // rng-icon rng-icon-add_circle\n  @Input() label: string;\n  @Input() disabled: boolean | false;\n\n  @Output() buttonClick = new EventEmitter();\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'rng-menu-button',\n  templateUrl: './menu-button.component.html',\n  styleUrls: []\n})\nexport class MenuButtonComponent {\n  @Input() items: string[] | null = ['Option 1', 'Option 2'];\n  @Input() light: boolean | null = false;\n\n  @Output() itemClick: EventEmitter<string> = new EventEmitter();\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\nimport { IButtonMenuItem } from '../../public-api';\n\n@Component({\n  selector: 'rng-options-button',\n  templateUrl: './options-button.component.html',\n  styleUrls: []\n})\nexport class OptionsButtonComponent {\n\n  @Output() primaryClick = new EventEmitter();\n  @Output() itemClick = new EventEmitter();\n\n  @Input() primaryTitle: string;\n  @Input() items: IButtonMenuItem[];\n  @Input() color: string | null = 'accent';\n\n  onPrimaryClick = () => this.primaryClick.emit();\n  onItemClick = (item: IButtonMenuItem) => this.itemClick.emit(item);\n\n  toggleChange(event) {\n    const toggle = event.source;\n    if (toggle) {\n      const group = toggle.buttonToggleGroup;\n      if (event.value.some(item => item === toggle.value)) {\n        group.value = [toggle.value];\n      }\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from './material.module';\nimport { BackButtonComponent } from './back-button/back-button.component';\nimport { IconLabelButtonComponent } from './icon-label-button/icon-label-button.component';\nimport { MenuButtonComponent } from './menu-button/menu-button.component';\nimport { OptionsButtonComponent } from './options-button/options-button.component';\n\n@NgModule({\n  declarations: [\n    BackButtonComponent,\n    IconLabelButtonComponent,\n    MenuButtonComponent,\n    OptionsButtonComponent,\n  ],\n  imports: [\n    CommonModule,\n    MaterialModule,\n  ],\n  exports: [\n    BackButtonComponent,\n    IconLabelButtonComponent,\n    MenuButtonComponent,\n    OptionsButtonComponent,\n  ]\n})\nexport class RngButtonsModule { }\n"]}